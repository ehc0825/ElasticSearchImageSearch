plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.6'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id 'jacoco'
	id "org.sonarqube" version "3.5.0.2730"
}

group = 'com.ehc'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

jacoco {
	toolVersion = '0.8.8'
}


configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven { url 'https://jitpack.io' }
}

test {
	useJUnitPlatform()
	jacoco{

	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-undertow:2.6.1'
	implementation 'org.elasticsearch:elasticsearch:7.5.1'
	implementation 'org.elasticsearch.client:elasticsearch-rest-high-level-client:7.5.1'
	implementation 'org.elasticsearch.client:elasticsearch-rest-client:7.5.1'
	implementation 'com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.3'
	implementation 'com.github.ehc0825:elastiknnQueryBuild:7.10.2-oss'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation "org.assertj:assertj-core:3.20.2"
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

task testConverage(type: Test)
{
	group 'verification'
	description 'Runs the unit tests with coverage'
	dependsOn(':test',
			':jacocoTestReport',
			':jacocoTestCoverageVerification')

	tasks['jacocoTestReport'].mustRunAfter(tasks['test'])
	tasks['jacocoTestCoverageVerification'].mustRunAfter(tasks['jacocoTestReport'])
}


jacocoTestReport {
	reports {
		//원하는 리포트 켜고 끄기 가능
		html.enabled(true)
		xml.enabled(true)
		csv.enabled(false)
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			//on off 가능
			enabled = true
			//룰을 체크할 단위
			element = 'CLASS'
			limit {
				//브랜치커버리지를 최소한 90퍼샌트 만족시켜야됨
				counter = 'BRANCH'
				value = 'COVEREDRATIO'
				minimum = 0.90
			}
			//라인 커버리지 80퍼 만족시켜야됨
			limit{
				counter='LINE'
				value='COVEREDRATIO'
				minimum=0.80
			}
			//빈줄을 제외한 코드의 라인수를 최대 200라인으로 제한
			limit{
				counter='LINE'
				value='TOTALCOUNT'
				maximum=300
			}

//커버리지 제외할 클래스들 설정 가능 와일드카드 * 과 ? 사용 가능
			//경로는 패키지+클래스 명으로 적어야 됨
			excludes = [
					'*dao*',
					'*config*',
					'*controller*',
					'*service*',
					'*dto*',
					'*Mapping*',
					'*Application*'
			]
		}
	}
}

apply plugin: 'org.sonarqube'
sonarqube {
	properties {
		property "sonar.host.url", "http://localhost:9000/"
		property "sonar.login", "sqp_37d66c9931d1d16daaa5adbf0cf9bbf07c716499"
		property "sonar.projectKey", "ElasticsearchImageSearch"
		property "sonar.projectName", "ElasticsearchImageSearch"
		property "sonar.projectVersion", "1.0"
		property "sonar.sourceEncoding", "UTF-8"
		property "sonar.sources", "src/main/java"
		property "sonar.profile", "Sonar way"
		property "sonar.scm.provider", "git"
		property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/jacocoTestReport.xml"
		property "sonar.exclusions", "**/config/JasyptConfig.java ,**/dto/*,**/dao/*, **/controller/*, **/cofig/ElasticSearchConfig.java, **/service/*, **/ElasticSearchImageSearchApplication.java"
	}
}